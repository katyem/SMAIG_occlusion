#search colorCount for thisColor
thisMatch = match(thisColor, colorCount);
if (!is.na(thisMatch) & thisMatch > nrow(colorCount)) {  # match wasn't in first column
thisMatch <- NA;
}
if (is.na(thisMatch)) { # there was no match AND it wasn't black so add it to colorCount array
colorCount <- rbind(colorCount, c(replicate(NROW(im_names)+1, 0))); # add a row and store 0 to each cell
colorCount[nrow(colorCount),1] <- thisColor; # save the color to the first column of the new row
colorCount[nrow(colorCount), cnt] <- 1; # start the count of the new color in the column for this image/cnt
#print(thisColor);
#Sys.sleep(5);
} else {
colorCount[thisMatch,cnt] = colorCount[thisMatch,cnt]+1;
}
}
}
}
print(imName);  print(cnt);
}
cnt = 0
colorCount <- matrix(ncol = NROW(im_names)+1)  # set up matrix
for (imName in im_names) {
temp <- paste("AIGpics/", imName, sep='');
im <- load.image(temp);  #sets the name of the image in the loop que
cnt = cnt+1; # first row = 2 because row 1 is all N/A
cntColors = 0; #track the number of colors in this image
for (x in 1:400) {  # width = 400 pixels
for (y in 1:400) {  # height = 400 pixels
thisColor <- round(as.numeric(im[x,y,1,1]), 1) # The color (rounded) of the pixel at location x,y
if ( thisColor != 0) {  # if the color is not black
#search colorCount for thisColor
thisMatch = match(thisColor, colorCount);
if (!is.na(thisMatch) & thisMatch > nrow(colorCount)) {  # match wasn't in first column
thisMatch <- NA;
}
if (is.na(thisMatch)) { # there was no match AND it wasn't black so add it to colorCount array
colorCount <- rbind(colorCount, c(replicate(NROW(im_names)+1, 0))); # add a row and store 0 to each cell
colorCount[nrow(colorCount),1] <- thisColor; # save the color to the first column of the new row
colorCount[nrow(colorCount), cnt] <- 1; # start the count of the new color in the column for this image/cnt
#print(thisColor);
#Sys.sleep(5);
} else {
colorCount[thisMatch,cnt] = colorCount[thisMatch,cnt]+1;
}
}
}
}
print(imName);  print(cnt);
}
View(colorCount)
cnt = 1
colorCount <- matrix(ncol = NROW(im_names)+1)  # set up matrix
for (imName in im_names) {
temp <- paste("AIGpics/", imName, sep='');
im <- load.image(temp);  #sets the name of the image in the loop que
cnt = cnt+1; # first row = 2 because row 1 is all N/A
cntColors = 0; #track the number of colors in this image
for (x in 1:400) {  # width = 400 pixels
for (y in 1:400) {  # height = 400 pixels
thisColor <- round(as.numeric(im[x,y,1,1]), 1) # The color (rounded) of the pixel at location x,y
if ( thisColor != 0) {  # if the color is not black
#search colorCount for thisColor
thisMatch = match(thisColor, colorCount);
if (!is.na(thisMatch) & thisMatch > nrow(colorCount)) {  # match wasn't in first column
thisMatch <- NA;
}
if (is.na(thisMatch)) { # there was no match AND it wasn't black so add it to colorCount array
colorCount <- rbind(colorCount, c(replicate(NROW(im_names)+1, 0))); # add a row and store 0 to each cell
colorCount[nrow(colorCount),1] <- thisColor; # save the color to the first column of the new row
colorCount[nrow(colorCount), cnt] <- 1; # start the count of the new color in the column for this image/cnt
#print(thisColor);
#Sys.sleep(5);
} else {
colorCount[thisMatch,cnt] = colorCount[thisMatch,cnt]+1;
}
}
}
}
print(imName);  print(cnt);
}
View(colorCount)
View(colorCount)
cnt = 1
colorCount <- matrix(ncol = NROW(im_names)+1)  # set up matrix
for (imName in im_names) {
temp <- paste("AIGpics/", imName, sep='');
im <- load.image(temp);  #sets the name of the image in the loop que
colorCount[1,imName] <- im_names[imName]
cnt = cnt+1; # first row = 2 because row 1 is all N/A
cntColors = 0; #track the number of colors in this image
for (x in 1:400) {  # width = 400 pixels
for (y in 1:400) {  # height = 400 pixels
thisColor <- round(as.numeric(im[x,y,1,1]), 1) # The color (rounded) of the pixel at location x,y
if ( thisColor != 0) {  # if the color is not black
#search colorCount for thisColor
thisMatch = match(thisColor, colorCount);
if (!is.na(thisMatch) & thisMatch > nrow(colorCount)) {  # match wasn't in first column
thisMatch <- NA;
}
if (is.na(thisMatch)) { # there was no match AND it wasn't black so add it to colorCount array
colorCount <- rbind(colorCount, c(replicate(NROW(im_names)+1, 0))); # add a row and store 0 to each cell
colorCount[nrow(colorCount),1] <- thisColor; # save the color to the first column of the new row
colorCount[nrow(colorCount), cnt] <- 1; # start the count of the new color in the column for this image/cnt
#print(thisColor);
#Sys.sleep(5);
} else {
colorCount[thisMatch,cnt] = colorCount[thisMatch,cnt]+1;
}
}
}
}
print(imName);  print(cnt);
}
imName
cnt
colorCount[1,cnt]
colorCount[1,41]
cnt = 1
colorCount <- matrix(ncol = NROW(im_names)+1)  # set up matrix
for (imName in im_names) {
temp <- paste("AIGpics/", imName, sep='');
im <- load.image(temp);  #sets the name of the image in the loop que
colorCount[1,cnt] <- im_namescnt]
cnt = cnt+1; # first row = 2 because row 1 is all N/A  ??????????  Isn't cnt a column cnt?
cntColors = 0; #track the number of colors in this image
for (x in 1:400) {  # width = 400 pixels
for (y in 1:400) {  # height = 400 pixels
thisColor <- round(as.numeric(im[x,y,1,1]), 1) # The color (rounded) of the pixel at location x,y
if ( thisColor != 0) {  # if the color is not black
#search colorCount for thisColor
thisMatch = match(thisColor, colorCount);
if (!is.na(thisMatch) & thisMatch > nrow(colorCount)) {  # match wasn't in first column
thisMatch <- NA;
}
if (is.na(thisMatch)) { # there was no match AND it wasn't black so add it to colorCount array
colorCount <- rbind(colorCount, c(replicate(NROW(im_names)+1, 0))); # add a row and store 0 to each cell
colorCount[nrow(colorCount),1] <- thisColor; # save the color to the first column of the new row
colorCount[nrow(colorCount), cnt] <- 1; # start the count of the new color in the column for this image/cnt
#print(thisColor);
#Sys.sleep(5);
} else {
colorCount[thisMatch,cnt] = colorCount[thisMatch,cnt]+1;
}
}
}
}
print(imName);  print(cnt);
}
for (imName in im_names) {
temp <- paste("AIGpics/", imName, sep='');
im <- load.image(temp);  #sets the name of the image in the loop que
colorCount[1,cnt] <- im_names[cnt]
cnt = cnt+1; # first row = 2 because row 1 is all N/A  ??????????  Isn't cnt a column cnt?
cntColors = 0; #track the number of colors in this image
for (x in 1:400) {  # width = 400 pixels
for (y in 1:400) {  # height = 400 pixels
thisColor <- round(as.numeric(im[x,y,1,1]), 1) # The color (rounded) of the pixel at location x,y
if ( thisColor != 0) {  # if the color is not black
#search colorCount for thisColor
thisMatch = match(thisColor, colorCount);
if (!is.na(thisMatch) & thisMatch > nrow(colorCount)) {  # match wasn't in first column
thisMatch <- NA;
}
if (is.na(thisMatch)) { # there was no match AND it wasn't black so add it to colorCount array
colorCount <- rbind(colorCount, c(replicate(NROW(im_names)+1, 0))); # add a row and store 0 to each cell
colorCount[nrow(colorCount),1] <- thisColor; # save the color to the first column of the new row
colorCount[nrow(colorCount), cnt] <- 1; # start the count of the new color in the column for this image/cnt
#print(thisColor);
#Sys.sleep(5);
} else {
colorCount[thisMatch,cnt] = colorCount[thisMatch,cnt]+1;
}
}
}
}
print(imName);  print(cnt);
}
cnt = cnt+1; # first row = 2 because row 1 is all N/A  ??????????  Isn't cnt a column cnt?
cnt = 1
colorCount <- matrix(ncol = NROW(im_names)+1)  # set up matrix
for (imName in im_names) {
temp <- paste("AIGpics/", imName, sep='');
im <- load.image(temp);  #sets the name of the image in the loop que
colorCount[1,cnt] <- im_names[cnt]
cnt = cnt+1; # first row = 2 because row 1 is all N/A  ??????????  Isn't cnt a column cnt?
cntColors = 0; #track the number of colors in this image
for (x in 1:400) {  # width = 400 pixels
for (y in 1:400) {  # height = 400 pixels
thisColor <- round(as.numeric(im[x,y,1,1]), 1) # The color (rounded) of the pixel at location x,y
if ( thisColor != 0) {  # if the color is not black
#search colorCount for thisColor
thisMatch = match(thisColor, colorCount);
if (!is.na(thisMatch) & thisMatch > nrow(colorCount)) {  # match wasn't in first column
thisMatch <- NA;
}
if (is.na(thisMatch)) { # there was no match AND it wasn't black so add it to colorCount array
colorCount <- rbind(colorCount, c(replicate(NROW(im_names)+1, 0))); # add a row and store 0 to each cell
colorCount[nrow(colorCount),1] <- thisColor; # save the color to the first column of the new row
colorCount[nrow(colorCount), cnt] <- 1; # start the count of the new color in the column for this image/cnt
#print(thisColor);
#Sys.sleep(5);
} else {
colorCount[thisMatch,cnt] = colorCount[thisMatch,cnt]+1;
}
}
}
}
print(imName);  print(cnt);
}
cnt = 1
colorCount <- matrix(ncol = NROW(im_names)+1)  # set up matrix
for (imName in im_names) {
temp <- paste("AIGpics/", imName, sep='');
im <- load.image(temp);  #sets the name of the image in the loop que
cnt = cnt+1; # first row = 2 because row 1 is all N/A  ??????????  Isn't cnt a column cnt?
cntColors = 0; #track the number of colors in this image
for (x in 1:400) {  # width = 400 pixels
for (y in 1:400) {  # height = 400 pixels
thisColor <- round(as.numeric(im[x,y,1,1]), 1) # The color (rounded) of the pixel at location x,y
if ( thisColor != 0) {  # if the color is not black
#search colorCount for thisColor
thisMatch = match(thisColor, colorCount);
if (!is.na(thisMatch) & thisMatch > nrow(colorCount)) {  # match wasn't in first column
thisMatch <- NA;
}
if (is.na(thisMatch)) { # there was no match AND it wasn't black so add it to colorCount array
colorCount <- rbind(colorCount, c(replicate(NROW(im_names)+1, 0))); # add a row and store 0 to each cell
colorCount[nrow(colorCount),1] <- thisColor; # save the color to the first column of the new row
colorCount[nrow(colorCount), cnt] <- 1; # start the count of the new color in the column for this image/cnt
#print(thisColor);
#Sys.sleep(5);
} else {
colorCount[thisMatch,cnt] = colorCount[thisMatch,cnt]+1;
}
}
}
}
print(imName);  print(cnt);
}
View(colorCount)
## colorCount <- colorCount[-1,-1]; #Delete the empty first row
cnt = 1
for (imName in im_names) {
cnt = cnt+1
colorCount[1,cnt] <- imName
}
View(colorCount)
write.xlsx(colorCount, "colorCount.xlsx") # each column = image; rows = colors (.1-1)
## colorCount <- colorCount[-1,-1]; #Delete the empty first row
colorCount[1,1] <- "color code"
View(colorCount)
write.xlsx(colorCount, file, sheetName = "colorCount.xlsx", col.names=FALSE, row.names=FALSE) # each column = image; rows = color categories (.1-1)
write.xlsx(colorCount, sheetName = "colorCount.xlsx", col.names=FALSE, row.names=FALSE) # each column = image; rows = color categories (.1-1)
write.xlsx(colorCount, "colorCount.xlsx", col.names=FALSE, row.names=FALSE) # each column = image; rows = color categories (.1-1)
write.xlsx(colorCount, "colorCount.xlsx", col.names=FALSE, row.names=FALSE) # each column = image; rows = color categories (.1-1)
picPath <- "AIGpics/"  ## CHANGE to appropriate image sub-folder
im_names <- list.files (path = picPath); #folder with pictures in your working directory
im_names[43]
setwd("D:/R stuff/smaig/SMAIG occlusion/")
picPath <- "AIGpics/"  ## CHANGE to appropriate image sub-folder
im_names <- list.files (path = picPath); #folder with pictures in your working directory
cnt = 1
colorCount <- matrix(ncol = NROW(im_names)+1)  # set up matrix
for (imName in im_names) {
temp <- paste(picPath, imName, sep='');
im <- load.image(temp);  #sets the name of the image in the loop que
cnt = cnt+1; # first row = 2 because row 1 is all N/A  ??????????  Isn't cnt a column cnt?
cntColors = 0; #track the number of colors in this image
for (x in 1:400) {  # width = 400 pixels
for (y in 1:400) {  # height = 400 pixels
thisColor <- round(as.numeric(im[x,y,1,1]), 1) # The color (rounded) of the pixel at location x,y
if ( thisColor != 0) {  # if the color is not black
#search colorCount for thisColor
thisMatch = match(thisColor, colorCount);
if (!is.na(thisMatch) & thisMatch > nrow(colorCount)) {  # match wasn't in first column
thisMatch <- NA;
}
if (is.na(thisMatch)) { # there was no match AND it wasn't black so add it to colorCount array
colorCount <- rbind(colorCount, c(replicate(NROW(im_names)+1, 0))); # add a row and store 0 to each cell
colorCount[nrow(colorCount),1] <- thisColor; # save the color to the first column of the new row
colorCount[nrow(colorCount), cnt] <- 1; # start the count of the new color in the column for this image/cnt
#print(thisColor);
#Sys.sleep(5);
} else {
colorCount[thisMatch,cnt] = colorCount[thisMatch,cnt]+1;
}
}
}
}
print(imName);  print(cnt);
}
View(colorCount)
View(colorCount)
View(colorCount)
## save image names to first row of colorCount matrix
colorCount[1,1] <- "color code"
cnt = 1
for (imName in im_names) {
cnt = cnt+1
colorCount[1,cnt] <- imName
}
colorCount[order(colorCount,[,1]),]
colorCount[order(colorCount$V1),]
colorCount[1,1] <- 0
colorCount[order(colorCount$V1),]
colorCount[order(colorCount[, "V1"]),]
colorCount[orderas.numeric((colorCount[, "V1"])),]
colorCount[order(numeric(colorCount[, "V1"])),]
colorCount[order(as.numeric(colorCount[, "V1"])),]
colorCount[order(as.numeric(colorCount[, 1])),]
colorCount[order(as.numeric(colorCount[, 1]), decreasing=TRUE),]
colorCount[order(as.numeric(colorCount[, 1]), decreasing=FALSE),]
colorCount[order(colorCount[, 1], decreasing=FALSE),]
colorCount[order(colorCount[, 1], decreasing=TRUE),]
colorCount[order(colorCount[, 1], decreasing=FALSE),]
colorCount[order(-colorCount[, 1]),]
colorCount[order(colorCount[, 1], decreasing=FALSE),]
View(colorCount)
colorCount[order(colorCount[, 1], decreasing=FALSE),]
View(colorCount)
colorCount[1,1]
colorCount[1,1] > colorCount[1,10]
colorCount[1,1] > colorCount[1,9]
colorCount[1,9] > colorCount[1,1]
colorCount[1,10] > colorCount[1,1]
colorCount[order(colorCount[, 2], decreasing=FALSE),]
View(colorCount)
colorCount[order(colorCount[, 0], decreasing=FALSE),]
View(colorCount)
colorCount[order(colorCount[, 1], decreasing=FALSE),]
colorCount <- colorCount[order(colorCount[, 1], decreasing=FALSE),]
## save image names to first row of colorCount matrix
colorCount[1,1] <- "color code"
write.xlsx(colorCount, "colorCount.xlsx", col.names=FALSE, row.names=FALSE) # each column = image; rows = non-black color categories (.1-1); black == 0, white = 1
im_names <- list.files (path = picPath); #folder with pictures in your working directory
cnt = 1
colorCount <- matrix(ncol = NROW(im_names)+1)  # set up matrix
for (imName in im_names) {
temp <- paste(picPath, imName, sep='');
im <- load.image(temp);  #sets the name of the image in the loop que
cnt = cnt+1; # column cnt: first column is used for color categories/codes
cntColors = 0; #track the number of colors in this image
for (x in 1:400) {  # width = 400 pixels
for (y in 1:400) {  # height = 400 pixels
thisColor <- round(as.numeric(im[x,y,1,1]), 1) # The color (rounded) of the pixel at location x,y
if ( thisColor != 0) {  # if the color is not black
#search colorCount for thisColor
thisMatch = as.numeric(match(thisColor, colorCount));
if (!is.na(thisMatch) & thisMatch > nrow(colorCount)) {  # match wasn't in first column
thisMatch <- NA;
}
if (is.na(thisMatch)) { # there was no match AND it wasn't black so add it to colorCount array
colorCount <- rbind(colorCount, c(replicate(NROW(im_names)+1, 0))); # add a row and store 0 to each cell
colorCount[nrow(colorCount),1] <- thisColor; # save the color to the first column of the new row
colorCount[nrow(colorCount), cnt] <- 1; # start the count of the new color in the column for this image/cnt
#print(thisColor);
#Sys.sleep(5);
} else {
colorCount[thisMatch,cnt] = colorCount[thisMatch,cnt]+1;
}
}
}
}
print(imName);  print(cnt);
}
##install.packages('imager')
library('imager')
library(xlsx)
getwd()
setwd("D:/R stuff/smaig/SMAIG occlusion/")
picPath <- "AIG-6/"  ## CHANGE to appropriate image sub-folder
im_names <- list.files (path = picPath); #folder with pictures in your working directory
cnt = 1
colorCount <- matrix(ncol = NROW(im_names)+1)  # set up matrix
for (imName in im_names) {
temp <- paste(picPath, imName, sep='');
im <- load.image(temp);  #sets the name of the image in the loop que
cnt = cnt+1; # column cnt: first column is used for color categories/codes
cntColors = 0; #track the number of colors in this image
for (x in 1:400) {  # width = 400 pixels
for (y in 1:400) {  # height = 400 pixels
thisColor <- round(as.numeric(im[x,y,1,1]), 2) # The color (rounded) of the pixel at location x,y
if ( thisColor != 0) {  # if the color is not black
#search colorCount for thisColor
thisMatch = as.numeric(match(thisColor, colorCount));
if (!is.na(thisMatch) & thisMatch > nrow(colorCount)) {  # match wasn't in first column
thisMatch <- NA;
}
if (is.na(thisMatch)) { # there was no match AND it wasn't black so add it to colorCount array
colorCount <- rbind(colorCount, c(replicate(NROW(im_names)+1, 0))); # add a row and store 0 to each cell
colorCount[nrow(colorCount),1] <- thisColor; # save the color to the first column of the new row
colorCount[nrow(colorCount), cnt] <- 1; # start the count of the new color in the column for this image/cnt
#print(thisColor);
#Sys.sleep(5);
} else {
colorCount[thisMatch,cnt] = colorCount[thisMatch,cnt]+1;
}
}
}
}
print(imName);  print(cnt);
}
colorCount[1,1] <- 0
colorCount <- colorCount[order(colorCount[, 1], decreasing=FALSE),]
## save image names to first row of colorCount matrix
colorCount[1,1] <- "color code"
cnt = 1
for (imName in im_names) {
cnt = cnt+1
colorCount[1,cnt] <- imName
}
write.xlsx(colorCount, "colorCount.xlsx", col.names=FALSE, row.names=FALSE) # each column = image; rows = non-black color categories (.1-1); black == 0, white = 1
cnt = 1
colorCount <- matrix(ncol = NROW(im_names)+1)  # set up matrix
for (imName in im_names) {
temp <- paste(picPath, imName, sep='');
im <- load.image(temp);  #sets the name of the image in the loop que
cnt = cnt+1; # column cnt: first column is used for color categories/codes
cntColors = 0; #track the number of colors in this image
for (x in 1:400) {  # width = 400 pixels
for (y in 1:400) {  # height = 400 pixels
thisColor <- round(as.numeric(im[x,y,1,1]), 2) # The color (rounded) of the pixel at location x,y
#  if ( thisColor != 0) {  # if the color is not black
#search colorCount for thisColor
thisMatch = as.numeric(match(thisColor, colorCount));
if (!is.na(thisMatch) & thisMatch > nrow(colorCount)) {  # match wasn't in first column
thisMatch <- NA;
}
if (is.na(thisMatch)) { # there was no match AND it wasn't black so add it to colorCount array
colorCount <- rbind(colorCount, c(replicate(NROW(im_names)+1, 0))); # add a row and store 0 to each cell
colorCount[nrow(colorCount),1] <- thisColor; # save the color to the first column of the new row
colorCount[nrow(colorCount), cnt] <- 1; # start the count of the new color in the column for this image/cnt
#print(thisColor);
#Sys.sleep(5);
} else {
colorCount[thisMatch,cnt] = colorCount[thisMatch,cnt]+1;
}
#}
}
}
print(imName);  print(cnt);
}
cnt = 1
colorCount <- matrix(ncol = NROW(im_names)+1)  # set up matrix
for (imName in im_names) {
temp <- paste(picPath, imName, sep='');
im <- load.image(temp);  #sets the name of the image in the loop que
cnt = cnt+1; # column cnt: first column is used for color categories/codes
cntColors = 0; #track the number of colors in this image
for (x in 1:400) {  # width = 400 pixels
for (y in 1:400) {  # height = 400 pixels
thisColor <- round(as.numeric(im[x,y,1,1]), 3) # The color (rounded) of the pixel at location x,y
#  if ( thisColor != 0) {  # if the color is not black
#search colorCount for thisColor
thisMatch = as.numeric(match(thisColor, colorCount));
if (!is.na(thisMatch) & thisMatch > nrow(colorCount)) {  # match wasn't in first column
thisMatch <- NA;
}
if (is.na(thisMatch)) { # there was no match AND it wasn't black so add it to colorCount array
colorCount <- rbind(colorCount, c(replicate(NROW(im_names)+1, 0))); # add a row and store 0 to each cell
colorCount[nrow(colorCount),1] <- thisColor; # save the color to the first column of the new row
colorCount[nrow(colorCount), cnt] <- 1; # start the count of the new color in the column for this image/cnt
#print(thisColor);
#Sys.sleep(5);
} else {
colorCount[thisMatch,cnt] = colorCount[thisMatch,cnt]+1;
}
#}
}
}
print(imName);  print(cnt);
}
cnt = 1
colorCount <- matrix(ncol = NROW(im_names)+1)  # set up matrix
for (imName in im_names) {
temp <- paste(picPath, imName, sep='');
im <- load.image(temp);  #sets the name of the image in the loop que
cnt = cnt+1; # column cnt: first column is used for color categories/codes
cntColors = 0; #track the number of colors in this image
for (x in 1:400) {  # width = 400 pixels
for (y in 1:400) {  # height = 400 pixels
thisColor <- as.numeric(im[x,y,1,1]) # The color (rounded) of the pixel at location x,y
#  if ( thisColor != 0) {  # if the color is not black
#search colorCount for thisColor
thisMatch = as.numeric(match(thisColor, colorCount));
if (!is.na(thisMatch) & thisMatch > nrow(colorCount)) {  # match wasn't in first column
thisMatch <- NA;
}
if (is.na(thisMatch)) { # there was no match AND it wasn't black so add it to colorCount array
colorCount <- rbind(colorCount, c(replicate(NROW(im_names)+1, 0))); # add a row and store 0 to each cell
colorCount[nrow(colorCount),1] <- thisColor; # save the color to the first column of the new row
colorCount[nrow(colorCount), cnt] <- 1; # start the count of the new color in the column for this image/cnt
#print(thisColor);
#Sys.sleep(5);
} else {
colorCount[thisMatch,cnt] = colorCount[thisMatch,cnt]+1;
}
#}
}
}
print(imName);  print(cnt);
}
colorCount[1,1] <- 0
colorCount <- colorCount[order(colorCount[, 1], decreasing=FALSE),]
## save image names to first row of colorCount matrix
colorCount[1,1] <- "color code"
cnt = 1
for (imName in im_names) {
cnt = cnt+1
colorCount[1,cnt] <- imName
}
write.xlsx(colorCount, "colorCount.xlsx", col.names=FALSE, row.names=FALSE) # each column = image; rows = non-black color categories (.1-1); black == 0, white = 1
