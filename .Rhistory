##temp <- paste(picPath, imName, sep='')
im <- load.image(paste(picPath, imName, sep=''))  #sets the name of the image in the loop que
imCount <- imCount + 1 # increment the count for the loop (there is most likely a better way to do this)
# I really miss double plus incrementation (word?): imCount++;
tempCount = 0
for (x in 1:width(im)) {  # width
for (y in 1:height(im)) {  # height
thisColor[1] <- round(as.numeric(im[x,y,1,1]),3) # The 1st color  of the pixel at location x,y
thisColor[2] <- round(as.numeric(im[x,y,1,2]),3) # The 2nd color  of the pixel at location x,y
thisColor[3] <- round(as.numeric(im[x,y,1,3]),3) # The 3rd color  of the pixel at location x,y
# roll through cubeColor to see if there is a match for this pixel across three channels
#if (thisColor[1] != 0 && thisColor[2] != 0 && thisColor[3] != 0) { #skip the search, color is black
for (cc in 1:NCOL(cubeColor)) {
#if (thisColor[1] == cubeColor[1,cc] && thisColor[2] == cubeColor[2,cc] && thisColor[3] == cubeColor[3,cc]) {
# generate an upper and lower value for each channel
cubeChannel <- matrix(0, 3, 2 )
tempCnt = 1
for (j in 1:3) {
cubeChannel[j,1] = cubeColor[tempCnt,cc]-.02
cubeChannel[j,2] = cubeColor[tempCnt,cc]+.02
tempCnt = tempCnt +1
}
if (between(thisColor[1],cubeChannel[1,1],cubeChannel[1,2])  && between(thisColor[2],cubeChannel[2,1],cubeChannel[2,2]) && between(thisColor[3],cubeChannel[3,1],cubeChannel[3,2])) {
colorCount[imCount, cc] = colorCount[imCount, cc] + 1
break
}
}
# }
}
}
print(imName);  print(imCount);
}
## Run code below to save to xls file
write.xlsx(colorCount, "colorCount.xlsx", col.names=T, row.names=T) # each column = image; rows = non-black color categories (.1-1); black == 0, white = 1
im_names <- list.files (path = picPath); #folder with pictures in your working directory
thisColor <- c(0,0,0) #used to store pixel channel values
imCount <- 0
colorCount <- matrix(0, NROW(im_names), NCOL(cubeColor) )  # set up matrix: images==rows
colnames(colorCount) <-  cNames
rownames(colorCount) <- im_names
for (imName in im_names) {
##temp <- paste(picPath, imName, sep='')
im <- load.image(paste(picPath, imName, sep=''))  #sets the name of the image in the loop que
imCount <- imCount + 1 # increment the count for the loop (there is most likely a better way to do this)
# I really miss double plus incrementation (word?): imCount++;
tempCount = 0
for (x in 1:width(im)) {  # width
for (y in 1:height(im)) {  # height
thisColor[1] <- round(as.numeric(im[x,y,1,1]),3) # The 1st color  of the pixel at location x,y
thisColor[2] <- round(as.numeric(im[x,y,1,2]),3) # The 2nd color  of the pixel at location x,y
thisColor[3] <- round(as.numeric(im[x,y,1,3]),3) # The 3rd color  of the pixel at location x,y
# roll through cubeColor to see if there is a match for this pixel across three channels
#if (thisColor[1] != 0 && thisColor[2] != 0 && thisColor[3] != 0) { #skip the search, color is black
for (cc in 1:NCOL(cubeColor)) {
#if (thisColor[1] == cubeColor[1,cc] && thisColor[2] == cubeColor[2,cc] && thisColor[3] == cubeColor[3,cc]) {
# generate an upper and lower value for each channel
cubeChannel <- matrix(0, 3, 2 )
tempCnt = 1
for (j in 1:3) {
cubeChannel[j,1] = cubeColor[tempCnt,cc]-.02
cubeChannel[j,2] = cubeColor[tempCnt,cc]+.02
tempCnt = tempCnt +1
}
if (between(thisColor[1],cubeChannel[1,1],cubeChannel[1,2])  && between(thisColor[2],cubeChannel[2,1],cubeChannel[2,2]) && between(thisColor[3],cubeChannel[3,1],cubeChannel[3,2])) {
colorCount[imCount, cc] = colorCount[imCount, cc] + 1
break
}
}
# }
}
}
print(imName);  print(imCount);
}
## Run code below to save to xls file
write.xlsx(colorCount, "colorCount.xlsx", col.names=T, row.names=T) # each column = image; rows = non-black color categories (.1-1); black == 0, white = 1
thisColor <- c(0,0,0) #used to store pixel channel values
imCount <- 0
colorCount <- matrix(0, NROW(im_names), NCOL(cubeColor) )  # set up matrix: images==rows
colnames(colorCount) <-  cNames
rownames(colorCount) <- im_names
for (imName in im_names) {
##temp <- paste(picPath, imName, sep='')
im <- load.image(paste(picPath, imName, sep=''))  #sets the name of the image in the loop que
imCount <- imCount + 1 # increment the count for the loop (there is most likely a better way to do this)
# I really miss double plus incrementation (word?): imCount++;
tempCount = 0
for (x in 1:width(im)) {  # width
for (y in 1:height(im)) {  # height
thisColor[1] <- round(as.numeric(im[x,y,1,1]),1) # The 1st color  of the pixel at location x,y
thisColor[2] <- round(as.numeric(im[x,y,1,2]),1) # The 2nd color  of the pixel at location x,y
thisColor[3] <- round(as.numeric(im[x,y,1,3]),1) # The 3rd color  of the pixel at location x,y
# roll through cubeColor to see if there is a match for this pixel across three channels
#if (thisColor[1] != 0 && thisColor[2] != 0 && thisColor[3] != 0) { #skip the search, color is black
for (cc in 1:NCOL(cubeColor)) {
#if (thisColor[1] == cubeColor[1,cc] && thisColor[2] == cubeColor[2,cc] && thisColor[3] == cubeColor[3,cc]) {
if (thisColor[1] == cubeColor[1,cc] && thisColor[2] == cubeColor[2,cc] && thisColor[3] == cubeColor[3,cc]) {
colorCount[imCount, cc] = colorCount[imCount, cc] + 1
}
}
# }
}
}
print(imName);  print(imCount);
}
thisColor <- c(0,0,0) #used to store pixel channel values
imCount <- 0
colorCount <- matrix(0, NROW(im_names), NCOL(cubeColor) )  # set up matrix: images==rows
colnames(colorCount) <-  cNames
rownames(colorCount) <- im_names
for (imName in im_names) {
##temp <- paste(picPath, imName, sep='')
im <- load.image(paste(picPath, imName, sep=''))  #sets the name of the image in the loop que
imCount <- imCount + 1 # increment the count for the loop (there is most likely a better way to do this)
# I really miss double plus incrementation (word?): imCount++;
tempCount = 0
for (x in 1:width(im)) {  # width
for (y in 1:height(im)) {  # height
thisColor[1] <- round(as.numeric(im[x,y,1,1]),1) # The 1st color  of the pixel at location x,y
thisColor[2] <- round(as.numeric(im[x,y,1,2]),1) # The 2nd color  of the pixel at location x,y
thisColor[3] <- round(as.numeric(im[x,y,1,3]),1) # The 3rd color  of the pixel at location x,y
for (cc in 1:NCOL(cubeColor)) {
#if (thisColor[1] == cubeColor[1,cc] && thisColor[2] == cubeColor[2,cc] && thisColor[3] == cubeColor[3,cc]) {
if (thisColor[1] == cubeColor[1,cc] && thisColor[2] == cubeColor[2,cc] && thisColor[3] == cubeColor[3,cc]) {
colorCount[imCount, cc] = colorCount[imCount, cc] + 1
break
}
}
# }
}
}
print(imName);  print(imCount);
}
## Run code below to save to xls file
write.xlsx(colorCount, "colorCount.xlsx", col.names=T, row.names=T) # each column = image; rows = non-black color categories (.1-1); black == 0, white = 1
setwd("D:/R stuff/smaig/SMAIG occlusion/")
picPath <- "smaigColor/"  ## CHANGE to appropriate image sub-folder
im_names <- list.files (path = picPath); #folder with pictures in your working directory
cnt = 1
colorCount <- matrix(ncol = NROW(im_names)+1)  # set up matrix
for (imName in im_names) {
temp <- paste(picPath, imName, sep='');
im <- load.image(temp);  #sets the name of the image in the loop que
cnt = cnt+1; # column cnt: first column is used for color categories/codes
cntColors = 0; #track the number of colors in this image
for (x in 1:width(im)) {  # width
for (y in 1:height(im)) {  # height
thisColor <- as.numeric(im[x,y,1,1]) # The color (rounded) of the pixel at location x,y
#  if ( thisColor != 0) {  # if the color is not black
#search colorCount for thisColor
thisMatch = as.numeric(match(thisColor, colorCount));
if (!is.na(thisMatch) & thisMatch > nrow(colorCount)) {  # match wasn't in first column
thisMatch <- NA;
}
if (is.na(thisMatch)) { # there was no match AND it wasn't black so add it to colorCount array
colorCount <- rbind(colorCount, c(replicate(NROW(im_names)+1, 0))); # add a row and store 0 to each cell
colorCount[nrow(colorCount),1] <- thisColor; # save the color to the first column of the new row
colorCount[nrow(colorCount), cnt] <- 1; # start the count of the new color in the column for this image/cnt
#print(thisColor);
#Sys.sleep(5);
} else {
colorCount[thisMatch,cnt] = colorCount[thisMatch,cnt]+1;
}
#}
}
}
print(imName);  print(cnt);
}
##install.packages('imager')
library('imager')
library(xlsx)
getwd()
setwd("D:/R stuff/smaig/SMAIG occlusion/")
picPath <- "smaigColor/"  ## CHANGE to appropriate image sub-folder
im_names <- list.files (path = picPath); #folder with pictures in your working directory
cnt = 1
colorCount <- matrix(ncol = NROW(im_names)+1)  # set up matrix
for (imName in im_names) {
temp <- paste(picPath, imName, sep='');
im <- load.image(temp);  #sets the name of the image in the loop que
cnt = cnt+1; # column cnt: first column is used for color categories/codes
cntColors = 0; #track the number of colors in this image
for (x in 1:width(im)) {  # width
for (y in 1:height(im)) {  # height
thisColor <- as.numeric(im[x,y,1,1]) # The color (rounded) of the pixel at location x,y
#  if ( thisColor != 0) {  # if the color is not black
#search colorCount for thisColor
thisMatch = as.numeric(match(thisColor, colorCount));
if (!is.na(thisMatch) & thisMatch > nrow(colorCount)) {  # match wasn't in first column
thisMatch <- NA;
}
if (is.na(thisMatch)) { # there was no match AND it wasn't black so add it to colorCount array
colorCount <- rbind(colorCount, c(replicate(NROW(im_names)+1, 0))); # add a row and store 0 to each cell
colorCount[nrow(colorCount),1] <- thisColor; # save the color to the first column of the new row
colorCount[nrow(colorCount), cnt] <- 1; # start the count of the new color in the column for this image/cnt
#print(thisColor);
#Sys.sleep(5);
} else {
colorCount[thisMatch,cnt] = colorCount[thisMatch,cnt]+1;
}
#}
}
}
print(imName);  print(cnt);
}
View(colorCount)
rownames(colorCount) <- im_names
setwd("D:/R stuff/smaig/SMAIG occlusion/")
picPath <- "smaigColor/"  ## CHANGE to appropriate image sub-folder
im_names <- list.files (path = picPath); #folder with pictures in your working directory
cnt = 0
colorCount <- matrix(ncol = NROW(im_names))  # set up matrix
rownames(colorCount) <- im_names
colorCount <- matrix(ncol = NROW(im_names))  # set up matrix
rownames(colorCount) <- im_names
im_names <- list.files (path = picPath); #folder with pictures in your working directory
im_names
cnt = 0
colorCount <- matrix(ncol = NROW(im_names))  # set up matrix
rownames(colorCount) <- im_names
im_names
ncol(colorCount)
ncol(im_names)
nrow(im_names)
im_names[1]
lengths(im_names)
length(im_names)
colnames(colorCount) <- im_names
im_names <- list.files (path = picPath); #folder with pictures in your working directory
colnames(colorCount) <- im_names
ncol(colorCount)
length(im_names)
##install.packages('imager')
library('imager')
library(xlsx)
getwd()
setwd("D:/R stuff/smaig/SMAIG occlusion/")
getwd()
setwd("D:/R stuff/SMAIG occlusion/")
picPath <- "smaigColor/"  ## CHANGE to appropriate image sub-folder
setwd("D:/R stuff/SMAIG_occlusion/")
picPath <- "smaigColor/"  ## CHANGE to appropriate image sub-folder
im_names <- list.files (path = picPath); #folder with pictures in your working directory
colnames(colorCount) <- im_names
cnt = 0
colorCount <- matrix(ncol = NROW(im_names))  # set up matrix
rownames(colorCount) <- im_names
picPath <- "smaigColor/"  ## CHANGE to appropriate image sub-folder
im_names <- list.files (path = picPath); #folder with pictures in your working directory
colnames(colorCount) <- im_names
setwd("D:/R stuff/SMAIG_occlusion/")
picPath <- "smaigColor/"  ## CHANGE to appropriate image sub-folder
im_names <- list.files (path = picPath); #folder with pictures in your working directory
colnames(colorCount) <- im_names
colnames(colorCount) <- im_names
im_names <- list.files (path = picPath); #folder with pictures in your working directory
colnames(colorCount) <- im_names
colnames(colorCount) <- im_names
ncol(colorCount)
colorCount <- matrix(ncol = NROW(im_names))  # set up matrix
colnames(colorCount) <- im_names
for (imName in im_names) {
temp <- paste(picPath, imName, sep='');
im <- load.image(temp);  #sets the name of the image in the loop que
cnt = cnt+1; # column count
cntColors = 0; #track the number of colors in this image
for (x in 1:width(im)) {  # width
for (y in 1:height(im)) {  # height
thisColor <- as.numeric(im[x,y,1,1]) # The color (rounded) of the pixel at location x,y
#  if ( thisColor != 0) {  # if the color is not black
#search colorCount for thisColor
thisMatch = as.numeric(match(thisColor, colorCount));
if (!is.na(thisMatch) & thisMatch > nrow(colorCount)) {  # match wasn't in first column
thisMatch <- NA;
}
if (is.na(thisMatch)) { # there was no match AND it wasn't black so add it to colorCount array
colorCount <- rbind(colorCount, c(replicate(NROW(im_names)+1, 0))); # add a row and store 0 to each cell
colorCount[nrow(colorCount),1] <- thisColor; # save the color to the first column of the new row
colorCount[nrow(colorCount), cnt] <- 1; # start the count of the new color in the column for this image/cnt
#print(thisColor);
#Sys.sleep(5);
} else {
colorCount[thisMatch,cnt] = colorCount[thisMatch,cnt]+1;
}
#}
}
}
print(imName);  print(cnt);
}
cnt = 0
colorCount <- matrix(ncol = NROW(im_names))  # set up matrix
colnames(colorCount) <- im_names
for (imName in im_names) {
temp <- paste(picPath, imName, sep='');
im <- load.image(temp);  #sets the name of the image in the loop que
cnt = cnt+1; # column count
cntColors = 0; #track the number of colors in this image
for (x in 1:width(im)) {  # width
for (y in 1:height(im)) {  # height
thisColor <- as.numeric(im[x,y,1,1]) # The color (rounded) of the pixel at location x,y
#  if ( thisColor != 0) {  # if the color is not black
#search colorCount for thisColor
thisMatch = as.numeric(match(thisColor, colorCount));
if (!is.na(thisMatch) & thisMatch > nrow(colorCount)) {  # match wasn't in first column
thisMatch <- NA;
}
if (is.na(thisMatch)) { # there was no match AND it wasn't black so add it to colorCount array
colorCount <- rbind(colorCount, c(replicate(NROW(im_names)+1, 0))); # add a row and store 0 to each cell
colorCount[nrow(colorCount),1] <- thisColor; # save the color to the first column of the new row
colorCount[nrow(colorCount), cnt] <- 1; # start the count of the new color in the column for this image/cnt
#print(thisColor);
#Sys.sleep(5);
} else {
colorCount[thisMatch,cnt] = colorCount[thisMatch,cnt]+1;
}
#}
}
}
print(imName);  print(cnt);
}
colorCount <- colorCount[order(colorCount[, 1], decreasing=FALSE),]
colorCount <- matrix(ncol = NROW(im_names))  # set up matrix
colnames(colorCount) <- im_names
cnt = 0
colorCount <- matrix(ncol = NROW(im_names))  # set up matrix
for (imName in im_names) {
temp <- paste(picPath, imName, sep='');
im <- load.image(temp);  #sets the name of the image in the loop que
cnt = cnt+1; # column count
cntColors = 0; #track the number of colors in this image
for (x in 1:width(im)) {  # width
for (y in 1:height(im)) {  # height
thisColor <- as.numeric(im[x,y,1,1]) # The color (rounded) of the pixel at location x,y
#  if ( thisColor != 0) {  # if the color is not black
#search colorCount for thisColor
thisMatch = as.numeric(match(thisColor, colorCount));
if (!is.na(thisMatch) & thisMatch > nrow(colorCount)) {  # match wasn't in first column
thisMatch <- NA;
}
if (is.na(thisMatch)) { # there was no match AND it wasn't black so add it to colorCount array
colorCount <- rbind(colorCount, c(replicate(NROW(im_names)+1, 0))); # add a row and store 0 to each cell
colorCount[nrow(colorCount),1] <- thisColor; # save the color to the first column of the new row
colorCount[nrow(colorCount), cnt] <- 1; # start the count of the new color in the column for this image/cnt
#print(thisColor);
#Sys.sleep(5);
} else {
colorCount[thisMatch,cnt] = colorCount[thisMatch,cnt]+1;
}
#}
}
}
print(imName);  print(cnt);
}
View(colorCount)
##install.packages('imager')
library('imager')
library(xlsx)
getwd()
setwd("D:/R stuff/SMAIG_occlusion/")
picPath <- "smaigColor/"  ## CHANGE to appropriate image sub-folder
im_names <- list.files (path = picPath); #folder with pictures in your working directory
cnt = 0
colorCount <- matrix(ncol = NROW(im_names))  # set up matrix
for (imName in im_names) {
temp <- paste(picPath, imName, sep='');
im <- load.image(temp);  #sets the name of the image in the loop que
cnt = cnt+1; # column count
cntColors = 0; #track the number of colors in this image
for (x in 1:width(im)) {  # width
for (y in 1:height(im)) {  # height
thisColor <- as.numeric(im[x,y,1,1]) # The color (rounded) of the pixel at location x,y
#  if ( thisColor != 0) {  # if the color is not black
#search colorCount for thisColor
thisMatch = as.numeric(match(thisColor, colorCount));
if (!is.na(thisMatch) & thisMatch > nrow(colorCount)) {  # match wasn't in first column
thisMatch <- NA;
}
if (is.na(thisMatch)) { # there was no match AND it wasn't black so add it to colorCount array
colorCount <- rbind(colorCount, c(replicate(NROW(im_names)+1, 0))); # add a row and store 0 to each cell
colorCount[nrow(colorCount),1] <- thisColor; # save the color to the first column of the new row
colorCount[nrow(colorCount), cnt] <- 1; # start the count of the new color in the column for this image/cnt
#print(thisColor);
#Sys.sleep(5);
} else {
colorCount[thisMatch,cnt] = colorCount[thisMatch,cnt]+1;
}
#}
}
}
print(imName);  print(cnt);
}
##install.packages('imager')
library('imager')
library(xlsx)
getwd()
setwd("D:/R stuff/SMAIG_occlusion/")
picPath <- "smaigColor/"  ## CHANGE to appropriate image sub-folder
im_names <- list.files (path = picPath); #folder with pictures in your working directory
cnt = 0
colorCount <- matrix(ncol = NROW(im_names))  # set up matrix
for (imName in im_names) {
temp <- paste(picPath, imName, sep='');
im <- load.image(temp);  #sets the name of the image in the loop que
cnt = cnt+1; # column count
cntColors = 0; #track the number of colors in this image
for (x in 1:width(im)) {  # width
for (y in 1:height(im)) {  # height
thisColor <- as.numeric(im[x,y,1,1]) # The color (rounded) of the pixel at location x,y
#  if ( thisColor != 0) {  # if the color is not black
#search colorCount for thisColor
thisMatch = as.numeric(match(thisColor, colorCount));
if (!is.na(thisMatch) & thisMatch > nrow(colorCount)) {  # match wasn't in first column
thisMatch <- NA;
}
if (is.na(thisMatch)) { # there was no match AND it wasn't black so add it to colorCount array
colorCount <- rbind(colorCount, c(replicate(NROW(im_names)+1, 0))); # add a row and store 0 to each cell
colorCount[nrow(colorCount),1] <- thisColor; # save the color to the first column of the new row
colorCount[nrow(colorCount), cnt] <- 1; # start the count of the new color in the column for this image/cnt
#print(thisColor);
#Sys.sleep(5);
} else {
colorCount[thisMatch,cnt] = colorCount[thisMatch,cnt]+1;
}
#}
}
}
print(imName);  print(cnt);
}
colorCount <- matrix(ncol = NROW(im_names))  # set up matrix
im_names
View(colorCount)
cnt = 0
colorCount <- matrix(ncol = NROW(im_names))+1  # set up matrix
for (imName in im_names) {
temp <- paste(picPath, imName, sep='');
im <- load.image(temp);  #sets the name of the image in the loop que
cnt = cnt+1; # column count
cntColors = 0; #track the number of colors in this image
for (x in 1:width(im)) {  # width
for (y in 1:height(im)) {  # height
thisColor <- as.numeric(im[x,y,1,1]) # The color (rounded) of the pixel at location x,y
#  if ( thisColor != 0) {  # if the color is not black
#search colorCount for thisColor
thisMatch = as.numeric(match(thisColor, colorCount));
if (!is.na(thisMatch) & thisMatch > nrow(colorCount)) {  # match wasn't in first column
thisMatch <- NA;
}
if (is.na(thisMatch)) { # there was no match AND it wasn't black so add it to colorCount array
colorCount <- rbind(colorCount, c(replicate(NROW(im_names)+1, 0))); # add a row and store 0 to each cell
colorCount[nrow(colorCount),1] <- thisColor; # save the color to the first column of the new row
colorCount[nrow(colorCount), cnt] <- 1; # start the count of the new color in the column for this image/cnt
#print(thisColor);
#Sys.sleep(5);
} else {
colorCount[thisMatch,cnt] = colorCount[thisMatch,cnt]+1;
}
#}
}
}
print(imName);  print(cnt);
}
colorCount <- matrix(ncol = NROW(im_names))+1  # set up matrix
cnt
im
plot(im)
y
height(im)
width(im)
x
imName
colorCount <- matrix(ncol = NROW(im_names))+1  # set up matrix
View(colorCount)
colorCount <- matrix(ncol = NROW(im_names)+1)  # set up matrix
for (imName in im_names) {
temp <- paste(picPath, imName, sep='');
im <- load.image(temp);  #sets the name of the image in the loop que
cnt = cnt+1; # column count
cntColors = 0; #track the number of colors in this image
# plot(im)
for (x in 1:width(im)) {  # width
for (y in 1:height(im)) {  # height
thisColor <- as.numeric(im[x,y,1,1]) # The color (rounded) of the pixel at location x,y
#  if ( thisColor != 0) {  # if the color is not black
#search colorCount for thisColor
thisMatch = as.numeric(match(thisColor, colorCount));
if (!is.na(thisMatch) & thisMatch > nrow(colorCount)) {  # match wasn't in first column
thisMatch <- NA;
}
if (is.na(thisMatch)) { # there was no match AND it wasn't black so add it to colorCount array
colorCount <- rbind(colorCount, c(replicate(NROW(im_names)+1, 0))); # add a row and store 0 to each cell
colorCount[nrow(colorCount),1] <- thisColor; # save the color to the first column of the new row
colorCount[nrow(colorCount), cnt] <- 1; # start the count of the new color in the column for this image/cnt
#print(thisColor);
#Sys.sleep(5);
} else {
colorCount[thisMatch,cnt] = colorCount[thisMatch,cnt]+1;
}
#}
}
}
print(imName);  print(cnt);
}
colnames(colorCount) <- "Code"+im_names
im_moniker = c("Code")
im_monider <- im_names
im_moniker <- im_names
temp = list("Code")
im_moniker <- append(temp, im_names)
colnames(colorCount) <- im_names
colnames(colorCount) <- im_moniker
View(colorCount)
write.xlsx(colorCount, "colorCount.xlsx", col.names=FALSE, row.names=FALSE) # each column = image; rows = non-black color categories (.1-1); black == 0, white = 1
write.xlsx(colorCount, "colorCount.xlsx", col.names=TRUE, row.names=FALSE) # each column = image; rows = non-black color categories (.1-1); black == 0, white = 1
